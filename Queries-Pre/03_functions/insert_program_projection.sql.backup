select
	distinct(tvprogramid),
	tvprogramname,
	created_date 
from
	migrate_temp."transaction_program_Budget" tpb 
where 
	1=1
--	and tvprogramid not like '0%' 
--	and tvprogramid not like 'F0%'
	and tvprogramid is not null
	and length(tvprogramid) > 0
order by created_date desc, tvprogramname, tvprogramid 
;

CREATE OR REPLACE VIEW dev.view_master_program_v2
AS SELECT 
	mc.bms_id,
    mc.name
FROM 
	dev.dblink(
	  	'dbname=integration port=5432 host=172.16.123.121 user=postgres password=initrans7'::text, 
	  	'
			SELECT 
				DISTINCT(row_id) as bms_id, 
				film_poc_title as "name"
			FROM gen21.mp_film mf 
			where 
				catslot_code <> ''DUM''
			order by film_poc_title
		'::text
	) mc(
		bms_id character varying(20), "name" character varying(50)
	);

SELECT 
	DISTINCT(row_id) as bms_id, 
	film_poc_title as "name"
FROM gen21.mp_film mf 
where 
	catslot_code <> 'DUM'
order by film_poc_title
;

-- dev.transaction_budget_programprojection definition

-- Drop table

-- DROP TABLE dev.transaction_budget_programprojection;

CREATE TABLE dev.transaction_budget_programprojection (
	id varchar(15) NOT NULL,
	programbms_id text NULL,
	programbms_name text NULL,
	programcms_id text NULL,
	programcms_name text NULL,
	yeardate int4 NOT NULL,
	monthdate int4 NOT NULL,
	slot text NULL,
	duration int4 NOT NULL,
	programbudget float8 NOT NULL,
	episodebudget float8 NOT NULL,
	totalepisode int4 NOT NULL,
	copb float8 NOT NULL,
	totalminutes int4 NOT NULL,
	totalhours float8 NOT NULL,
	parentid text NULL,
	daypart_id int4 NULL,
	departmentid text NULL,
	programcategoryid int4 NULL,
	approved_1 bool NOT NULL,
	approved1_by text NULL,
	approved1_date timestamp NULL,
	approved_2 bool NOT NULL,
	approved2_by text NULL,
	approved2_date timestamp NULL,
	approved_3 bool NOT NULL,
	approved3_by text NULL,
	approved3_date timestamp NULL,
	created_date timestamp NULL,
	created_by jsonb NULL,
	disabled_date timestamp NULL,
	is_disabled bool NOT NULL,
	disabled_by jsonb NULL,
	modified_date timestamp NULL,
	modified_by jsonb NULL,
	scheduleplanner_id text NULL,
	CONSTRAINT pk_transaction_budget_programprojection PRIMARY KEY (id),
	CONSTRAINT "fk_transaction_budget_programprojection_master_program_categor~" FOREIGN KEY (programcategoryid) REFERENCES dev.master_program_category(programcategoryid),
	CONSTRAINT "fk_transaction_budget_programprojection_master_show_inventory_~" FOREIGN KEY (daypart_id) REFERENCES dev.master_show_inventory_timezone(showinventorytimezoneid)
);
CREATE INDEX ix_transaction_budget_programprojection_daypart_id ON dev.transaction_budget_programprojection USING btree (daypart_id);
CREATE INDEX ix_transaction_budget_programprojection_departmentid ON dev.transaction_budget_programprojection USING btree (departmentid);
CREATE INDEX ix_transaction_budget_programprojection_programcategoryid ON dev.transaction_budget_programprojection USING btree (programcategoryid);


CREATE OR REPLACE PROCEDURE dev.insert_program_projection_cursor(
	year_date character varying)
LANGUAGE 'plpgsql'
AS $BODY$
DECLARE
	generated_id text;
	current_month text;
	last_month text;
	rec_scheduler record;
	cur_scheduler cursor(year_date varchar) 
		 for 
		 SELECT distinct 
			row_id_poc bms_id, film_poc_title FILM_BMS,
			(select row_id_cms from dev.view_airedprograms va2 
			 where row_id_bms = msp.row_id_poc 
				   and yeardate::varchar = year_date
			 limit 1) CMS_ID,
			(select FILM_CMS from dev.view_airedprograms va2 
			 where row_id_bms = msp.row_id_poc 
				   and yeardate::varchar = year_date
			 limit 1) FILM_CMS,
			1 as TimeZone, 1 as Division, '' Slot,
			CAST(msp.duration as integer)/10000 duration, 
			1 as programcategory,
			0 programbudget, count(row_id_poc) totalepisode,
			0 episodebudget, 0 copb,
			sum(CAST(msp.duration as integer)/10000) minutes,
			sum(CAST(msp.duration as integer)/10000)/60 hours,
			CAST(extract(MONTH from cbs_date) as integer) MONTHDATE,
			CAST(extract(year from cbs_date) as integer) YEARDATE,
			0
		FROM dev.MP_SCH_PLANNER msp
		where extract(year from cbs_date)::varchar = year_date
		group by row_id_poc,film_poc_title,duration,
				extract(year from cbs_date),
				extract(MONTH from cbs_date)
		order by film_poc_title;
begin
	--open cursor
	open cur_scheduler(year_date);
	loop
	fetch cur_scheduler into rec_scheduler;
	exit when not found;
	
	--set generated id for sequencer
	current_month = date_part('month',(current_timestamp));
	last_month = date_part('month',(SELECT lastmonth FROM dev.master_sequencer WHERE type = 'TP'));
	if current_month <> last_month then
	  UPDATE dev.master_sequencer
		SET
		lastid = 0
		WHERE type = 'TP';
	end if;
	
	--get generated id
	generated_id := (select dev.select_sequencer_id('TP'));
	
	--UPDATE SEQUENCER
	UPDATE dev.master_sequencer
	SET
	lastid = lastid + 1
	WHERE type = 'TP';
	
	--insert data
	insert into dev.transaction_programprojection
	(id, programbms_id,programbms_name , programcms_id , programcms_name , daypart_id , division_id , slot , duration , 
	programcategory_id , programbudget , totalepisode , episodebudget , copb , totalminutes , totalhours , monthdate , yeardate, parentid,
	approved_1, approved1_by, approved1_date,approved_2, approved2_by, approved2_date,approved_3, approved3_by, approved3_date)
	values
	(generated_id, rec_scheduler.bms_id, rec_scheduler.FILM_BMS, rec_scheduler.CMS_ID, rec_scheduler.FILM_CMS, 1, 
	 NULL, rec_scheduler.Slot, rec_scheduler.duration, 1, rec_scheduler.programbudget,
	 rec_scheduler.totalepisode, rec_scheduler.episodebudget, rec_scheduler.copb, rec_scheduler.minutes, rec_scheduler.hours, 
	 rec_scheduler.MONTHDATE, rec_scheduler.YEARDATE, '',
	 false, NULL,NULL,false, NULL,NULL,false, NULL,NULL
	);
	
	end loop;
   close cur_scheduler;
	commit;
	   -- close the cursor
	
end;
$BODY$;

delete from dev.transaction_budget_programprojection;
call dev.insert_program_projection_cursor('2022');

SELECT distinct 
	row_id_poc bms_id, 
	film_poc_title FILM_BMS,
	(select row_id_cms from dev.view_airedprograms va2 
	 where row_id_bms = msp.row_id_poc 
		   and yeardate::varchar = '2022' /*year_date*/
	 limit 1) CMS_ID,
	(select FILM_CMS from dev.view_airedprograms va2 
	 where row_id_bms = msp.row_id_poc 
		   and yeardate::varchar = '2022' /*year_date*/
	 limit 1) FILM_CMS,
	1 as TimeZone, 
	1 as Division, 
	'' Slot,
	CAST(msp.duration as integer)/10000 duration,
	1 as programcategory,
	0 programbudget, 
	count(row_id_poc) totalepisode,
	0 episodebudget, 
	0 copb,
	sum(CAST(msp.duration as integer)/10000) minutes,
	sum(CAST(msp.duration as integer)/10000)/60 hours,
	CAST(extract(MONTH from cbs_date) as integer) MONTHDATE,
	CAST(extract(year from cbs_date) as integer) YEARDATE,
	0
FROM dev.MP_SCH_PLANNER msp
where 
	1=1
	and extract(year from cbs_date)::varchar = '2022' /*year_date*/
group by 
	row_id_poc,
	film_poc_title,
	duration,
	extract(year from cbs_date),
	extract(MONTH from cbs_date)
order by film_poc_title;

REFRESH MATERIALIZED view dev.mp_sch_planner  ;
REFRESH MATERIALIZED view dev.view_airedprograms ;


---------------------------------------------------------------

create temp table if not exists transaksi_jurnalbilyet as        
	select 
		* 
	from 
		transaction_journal_detail tjd 
	where 
		tjd.bilyet_date is not null
	;    
create temp table if not exists bankentryOR_satu1 as        
	select 
		a.tjournalid, 
		a.tjournal_detailid, 
		b.accountcaid, 
		c.idramount, 
		c.foreignamount        
	from           
		transaksi_jurnalbilyet a           
		left outer join transaction_journal b on a.tjournalid = b.tjournalid           
		left outer join transaction_journal_detail c on a.tjournalid = c.tjournalid and a.tjournal_detailid = c.tjournal_detailid         
	where            
		substring(a.tjournalid from 1 for 2) = 'OR'        
	;    
create temp table if not exists bankentryOR_satu2 as        
	select 
		tbed.tbankentry_ref_id, 
		tbed.tbankentrydetailid, 
		tbed.accountcaid, 
		tbed.idramount, 
		tbed.foreignamount        
	from            
		transaction_bank_entry_detail tbed         
	where            
		tbed.dk = 'K' 
		and tbankentry_ref_id is not null      
	;    
create temp table if not exists bankentryOR_satu as        
	(select * from bankentryOR_satu1)        
	union        
	(select * from bankentryOR_satu2)        
	;    
create temp table if not exists bankentryOR_dua as        
	select 
		tmp.tjournalid, 
		tmp.tjournal_detailid,        
		sum(tmp.foreignamount) as outstanding_foreign,        
		sum(tmp.idramount) as outstanding_idr        
	from            
		bankentryOR_satu tmp         
	group by 
		tmp.tjournalid, 
		tmp.tjournal_detailid         
	;    
select        
	a.tjournalid, 
	a.tjournal_detailid, 
	a.paymenttypeid,        
	(select mpt.name from master_payment_type mpt where mpt.paymenttypeid = a.paymenttypeid) as payment_type_string,        
	a.bilyet_no, 
	c.description, 
	c.vendorid,        
	(select mv.name from master_vendor mv where mv.vendorid = c.vendorid) as vendor_name,        
	a.bilyet_effectivedate, 
	d.outstanding_idr as jurnaldetil_idr,        
	d.outstanding_foreign as jurnaldetil_foreign,        
	c.foreignrate, 
	c.currencyid,        
	(select mc.shortname from master_currency mc where mc.currencyid = c.currencyid) as currency_string,        
	c.accountid,        
	(select ma.nameshort from master_account ma where ma.accountid = c.accountid) as acc_string,        
	b.accountcaid,        
	(select mac.shortname from master_account_ca mac where mac.accountcaid = b.accountcaid) as acc_ca_string, 
	c.ref_id, c.ref_detail_id    
from        
	transaksi_jurnalbilyet a        
	left outer join transaction_journal b on a.tjournalid = b.tjournalid        
	left outer join transaction_journal_detail c on a.tjournalid = c.tjournalid and a.tjournal_detailid = c.tjournal_detailid        left outer join bankentryOR_dua d on a.tjournalid = d.tjournalid and a.tjournal_detailid = d.tjournal_detailid    
where        
	d.outstanding_idr > 0 
	and d.outstanding_foreign > 0 
	and (b.sourceid = 'OR-Billing' or (b.is_posted = true and b.is_disabled = false))       
	and (
			CASE WHEN c.currencyid = 1 THEN 
				d.outstanding_idr = 6066896.00 
			ELSE 
				d.outstanding_foreign = 6066896.00 
			END
		)
;